<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="$(DacFxExternals)\Microsoft.SqlServer.Dac.Extensions.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.SqlServer.Dac.Model"#>
<#+
//------------------------------------------------------------------------------
// <copyright company="Microsoft">
//   Copyright 2014 Microsoft
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// </copyright>
//------------------------------------------------------------------------------
private static string NamespaceName = "Microsoft.SqlServer.Dac.Extensions.Prototype";
private static string ClassNamePrefix = "TSql";

private static string GetPropertyTypeName(ModelPropertyClass property, out bool useGenericGetter )
{
	useGenericGetter = true;
	string typeName;
	if(property.DataType.IsGenericType)
	{
		Type[] genericTypes = property.DataType.GetGenericArguments();
		typeName = genericTypes[0].Name + "?";
	}
	else if( property.DataType.Name == "SqlScriptProperty")
	{
		// SqlScriptProperty is an internal type. The property getter should
		// return a string
		typeName = "String";
		useGenericGetter = false;
	}
	else
	{
		typeName  = property.DataType.Name;
	}

	return typeName;

}

private class ModelEntry
{
	public ModelEntry()
    {
		Interfaces = new List<string>();
		RelationshipOverrides = new Dictionary<string,RelationshipOverride>();
    }

	public List<string> Interfaces {get;set;}
	public Dictionary<string, RelationshipOverride> RelationshipOverrides {get;set;}
}

public class RelationshipOverride
{
	public string RelationshipName {get;set;}
	public string ReturnType {get;set;}
	public string ReturnTypeNamespace {get;set;}
	public bool Specialize {get;set;}

}
private static Dictionary<string, ModelEntry> LoadOverrides(string teampleFile)
{
	XmlDocument configurationData = new XmlDocument();
    configurationData.Load( System.IO.Path.GetDirectoryName(teampleFile) +"\\modelmetadata.xml");
    XmlNode root = configurationData.SelectSingleNode("Model");
	Dictionary<string, ModelEntry> overrides = new Dictionary<string, ModelEntry>();
    foreach (XmlNode element in root.ChildNodes)
    {
		List<string> interfaces = new List<string>();
		if(element.NodeType == XmlNodeType.Comment)
		{
			//skip comments
			continue;
		}

        string elementName = element.Attributes["Name"].Value;
		ModelEntry modelEntry = new ModelEntry();
		overrides.Add(elementName, modelEntry);
        foreach (XmlNode relationship in element.ChildNodes)
        {
			if(relationship.NodeType == XmlNodeType.Comment)
			{
				continue;
			}

			else if(relationship.LocalName == "Implements")
            {
				modelEntry.Interfaces.Add(relationship.Attributes["Name"].Value);
				continue;
            }
			else if(relationship.LocalName == "Relationship")
            {
				string name = relationship.Attributes["Name"].Value;
				
				modelEntry.RelationshipOverrides.Add(name, new RelationshipOverride() 
					{ 
						RelationshipName= name, //todo: allow overriding name
						ReturnType = relationship.Attributes["ReturnType"].Value, 
						ReturnTypeNamespace=relationship.Attributes["ReturnTypeNamespace"].Value, 
						Specialize=bool.Parse(relationship.Attributes["Specialize"].Value)
					});
            }
        }
    }
    return overrides;
}

private bool SupportsVersion(TSqlPlatforms platform, SqlServerVersion version)
        { 
            switch( version)
            {
                case SqlServerVersion.Sql90:
					return (platform & TSqlPlatforms.Sql90) == TSqlPlatforms.Sql90;
				case SqlServerVersion.Sql100:
                     return (platform & TSqlPlatforms.Sql100) == TSqlPlatforms.Sql100;
                case SqlServerVersion.Sql110:
                     return (platform & TSqlPlatforms.Sql110) == TSqlPlatforms.Sql110;
                case SqlServerVersion.Sql120:
                    return (platform & (TSqlPlatforms)0x00000010) == (TSqlPlatforms)0x00000010;                
                case SqlServerVersion.SqlAzure:
                     return (platform & TSqlPlatforms.SqlAzure) == TSqlPlatforms.SqlAzure;
                default:
                    return false;
            }   
        }
#>