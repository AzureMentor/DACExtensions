<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(DacFxExternals)\Microsoft.SqlServer.Dac.Extensions.dll" #>
<#@ import namespace="Microsoft.SqlServer.Dac.Model"#>
<#@ output extension=".cs" #>
<#@ include file="Utils.tt" #>

namespace <#=NamespaceName#>
{
	using System;
	using System.Linq; 
	using Microsoft.SqlServer.Server;
	using Microsoft.SqlServer.Dac.Model;
	using System.Collections.Generic;
<#
    var overrides = LoadOverrides(this.Host.TemplateFile);
	string typePrefix;

foreach(SqlServerVersion currentSQLVersion in Enum.GetValues(typeof(SqlServerVersion)))
{
	typePrefix = "I" + currentSQLVersion;
	foreach(var type in  ModelSchema.SchemaInstance.AllTypes)
	{
		string className = typePrefix+ type.Name;
#>
	public interface <#= className #> : ISqlModelElement
	{		
<#
        foreach (var property in type.Properties.OrderBy(p => p.Name))
        {
			if(!SupportsVersion(property.SupportedPlatforms, currentSQLVersion))
			{
				continue;
			}
			bool useGenericGetter;
			string typeName = GetPropertyTypeName(property, out useGenericGetter);			
#>
		<#= typeName #> <#= property.Name #> 
		{
			get;
		}
<#
		}// end property loop
		
	ModelEntry modelEntry;
	if(!overrides.TryGetValue(type.Name, out modelEntry))
	{	
		modelEntry = null;
	}
	
	// begin releationship loop
	foreach (var relationship in type.Relationships.OrderBy( r => r.Name))
	{
	   if (!SupportsVersion(relationship.SupportedPlatforms, currentSQLVersion))
	   {
	   // skip unsupported properties
		continue;
	   }
	string returnType = "TSqlObject";
	if(modelEntry != null)
	{
		RelationshipOverride localoverride;
		if(modelEntry.RelationshipOverrides.TryGetValue(relationship.Name, out localoverride))
		{
			if(localoverride.Specialize)
			{
				// specialize the return type to match the sql version interface name
				returnType = string.Format("{0}.{1}{2}", localoverride.ReturnTypeNamespace,typePrefix, localoverride.ReturnType);
			}
			else
			{
				// return type is not specialzied for each sql version interface.
				returnType = string.Format("{0}.{1}", localoverride.ReturnTypeNamespace, localoverride.ReturnType);
			}
		}
	}			
#>
		//<#=relationship.Type#>
		IEnumerable<<#=returnType#>> <#=relationship.Name #> 
		{
			get;
		}
<#		
	} //end foreach relationship
#>
	}
<#
	}
}
	#>
}