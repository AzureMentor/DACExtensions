//------------------------------------------------------------------------------
// <copyright company="Microsoft">
//   Copyright 2014 Microsoft
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// </copyright>
//------------------------------------------------------------------------------
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(DacFxExternals)\Microsoft.SqlServer.Dac.Extensions.dll" #>
<#@ import namespace="Microsoft.SqlServer.Dac.Model"#>
<#@ output extension=".cs" #>
<#@ include file="Utils.tt" #>
namespace <#=NamespaceName#>
{
	using System;
	using System.Linq;
	using Microsoft.SqlServer.Server;
	using Microsoft.SqlServer.Dac.Model;
	using System.Collections.Generic;
<#
var overrides = LoadOverrides(this.Host.TemplateFile);
string typePrefix;
foreach(SqlServerVersion currentSQLVersion in Enum.GetValues(typeof(SqlServerVersion)))
{
	typePrefix = "I" + currentSQLVersion;
	foreach(var type in  ModelSchema.SchemaInstance.AllTypes)
	{
		if(!SupportsVersion(type.SupportedPlatforms, currentSQLVersion))
        {
			// skipping type as it does not support the platform
			continue;
        }
		string interfaceName = typePrefix + ClassNamePrefix + type.Name;
		#>
	/// <summary>
	/// Explicit implementation of <see cref="<#=interfaceName#>"/>.
	/// </summary>
	public partial class <#= ClassNamePrefix + type.Name#> : <#=interfaceName#>
	{		
<#
        foreach (var property in type.Properties.OrderBy(p => p.Name))
        {
			if(!SupportsVersion(property.SupportedPlatforms, currentSQLVersion))
			{
				continue;
			}
			bool useGenericGetter;
			string typeName = GetPropertyTypeName(property, out useGenericGetter);
		#>
		<#= typeName #> <#=interfaceName#>.<#= property.Name #> 
		{
			get { return this.<#=property.Name#>;}
		}
<#
		}// end property loop
		
	ModelEntry modelEntry;		
	if(!overrides.TryGetValue(type.Name, out modelEntry))
	{	
		modelEntry = null;
	}

	// begin releationship loop
	foreach (var relationship in type.Relationships.OrderBy( r => r.Name))
	{
	   if (!SupportsVersion(relationship.SupportedPlatforms, currentSQLVersion))
	   {
	   // skip unsupported properties
		continue;
	   }
		string returnType = "TSqlObject";		
		string castExpression = "";
		if(modelEntry != null)
		{	RelationshipOverride localoverride;		
			if(modelEntry.RelationshipOverrides.TryGetValue(relationship.Name, out localoverride))
			{				
				if(localoverride.Specialize)
				{
					// specialize the return type for the sql server version
					returnType = string.Format("{0}.{1}{2}", localoverride.ReturnTypeNamespace, typePrefix, localoverride.ReturnType);
					castExpression = string.Format(".Cast<{0}>()", returnType);
				}
				else
				{
					// do not specialize the return type for the sql server version
					returnType = string.Format("{0}.{1}", localoverride.ReturnTypeNamespace, localoverride.ReturnType);
				}
			}
		}	
		{
		#>

		// <#=relationship.Type#> relationship		
		IEnumerable<<#=returnType#>> <#=interfaceName#>.<#=relationship.Name #> 
		{
			get 
			{
				return this.<#=relationship.Name + castExpression#>;
			}
		}
<#		
		}
	} //end foreach relationship
#>
	}
<#
	}
}
#>
}